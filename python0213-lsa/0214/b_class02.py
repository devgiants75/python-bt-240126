### 클래스의 구성 ###

# 클래스
# : 현실 세계의 개념이나 사물을 코드로 모델링하기 위해 사용되는
#   프로그래밍의 구조적 단위

# EX) 사람
# 사람이 가지는 값: 이름, 나이, 연락처, 주소, ...
# 사람이 할 수 있는 기능: 잔다, 먹는다, 공부한다, 걷는다, ...

#! 1. 클래스의 구성: 변수 & 함수
# 변수 - 값(객체의 상태를 저장)
# 함수(메서드) - 기능(객체가 수행할 수 있는 동작을 정의)

#? 클래스 내에서 정의된 변수
# : 클래스 변수 & 인스턴스 변수

#? 클래스를 구성하는 함수 - 메서드(method)
# : 클래스 메서드, 정적 메서드, 인스턴스 메서드

#! 2. 인스턴스 변수 & 인스턴스 메서드

#? 2-1. 인스턴스 변수
# : 클래스를 기반으로 만들어지는
#   모든 인스턴스(객체)들이 개별적으로 가지는 데이터
# : 클래스 내에 정의되지만, 각 인스턴스에서 독립적으로 값을 가짐
# : 각 객체의 상태 저장
# 인스턴스 변수의 형태
# : self.variable_name

#? 2-2. 인스턴스 메서드
# : 클래스 내에 정의된 함수, 클래스의 객체가 수행할 수 있는 동작
# : 인스턴스 변수를 사용하는 메서드
# : 첫 번째 인자(매개변수)로 self를 받아야 한다.
# self - 메서드를 호출하는 객체 자신을 참조

# Person 클래스 정의
class Person:
    # 인스턴스 메서드 - 첫 번째 매개변수가 self
    def who_am_i(self, name, age, tel, address):
        # self.name은 인스턴스 변수 name을 의미
        # 우항의 name은 매개변수 name을 의미
        # who_am_i() 메서드를 호출 시 전달된 name이
        # : 인스턴스의 name이 된다.
        self.name = name # seungah.name = name('이승아')
        self.age = age # seungah.age = 28
        self.tel = tel
        self.address = address

# 객체(인스턴스) 생성
seungah = Person()
# 객체(인스턴스)를 사용하여 클래스 내에 정의된 변수와 메서드 접근
# : 객체명.변수명 / 객체명.메서드명
seungah.who_am_i('이승아', 28, '010-1111-2222', '부산시')
print(seungah.name)
print(seungah.tel)

# 객체(인스턴스) 생성
dokyung = Person()
dokyung.who_am_i('이도경', 30, '010-2222-3333', '부산시')
print(dokyung.age) # 30
print(dokyung.address) # 부산시